package com.michael.microservices.driversservice;

import static org.hamcrest.CoreMatchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import com.michael.microservices.driversservice.bean.Address;
import com.michael.microservices.driversservice.bean.Driver;
import com.michael.microservices.driversservice.bean.DriversRepository;
import com.michael.microservices.driversservice.bean.Status;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;


@RunWith(SpringRunner.class)
@SpringBootTest()
@AutoConfigureMockMvc
public class DriversRestControllerIntegrationTest {
	
	@Autowired
    private MockMvc mvc;
	
	@Autowired
    private DriversRepository repository;
	
	@Test
	public void givenDrivers_whenGetDrivers_thenStatus200() throws Exception {

	    createTestDriver("Michael");
	    createTestDriver("Gilad");

		mvc.perform(get("/api/drivers")
			      .contentType(MediaType.APPLICATION_JSON))
			      .andExpect(status().isOk())
			      .andExpect(content()
			      .contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
			      .andExpect(jsonPath("$[0].firstName", is("Michael")))
				  .andExpect(jsonPath("$[1].firstName", is("Gilad")));
	}

	private void createTestDriver(String firstName) {
		Driver driver = new Driver(
				firstName, "last_name1", Status.ACTIVE,  8, 0, 18, 0, 32.819683, 34.967200,
				21, "email1@gmail.com", "0507656451",  
				new Address("Israel", "North", "Haifa", "street1" , 1, 1, 34, "11111", "i live somewhere1"));
        repository.saveAndFlush(driver);
    }
}
